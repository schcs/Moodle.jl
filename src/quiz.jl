# This file contains the functions related to quizzes

export moodle_quiz, WriteMoodleQuizzesToFile

# MoodleQuestion is an abstract type defined as the union of all question types
# at the moment only one question type is defined

MoodleQuestion = Union{short_answer_question, 
                             matching_question, 
                             multiple_choice_question,
                             VF_CLOZE_question} 

```@doc 
The data sructure that holds a quiz
```

struct moodle_quiz
    category::String                    # the category of the quiz
    questions::Vector{MoodleQuestion}   # the list of questions
end

# show method for moodle_quiz

function Base.show( io::IO, q::moodle_quiz )  
    print(io, "Moodle quiz\n\tCategory: ", q.category, 
            "\n\t", length(q.questions), " questions"  )
end


@doc """ 
converts a quiz to XML string and writes it into a file
"""->

function MoodleQuizToXML( quiz::moodle_quiz )
    # write a header
    str = "<quiz>\n\n"*
            "<question type=\"category\">\n<category>\n"*
            "<text>\$course\$/top/"*quiz.category*"</text>\n"*
            "</category>\n</question>\n\n"

    # write each question
    for q in quiz.questions
        str *= QuestionToXML( q )
    end

    # end of quiz
    str *= "\n</quiz>\n"

    # write XML into file
    return true
end

function WriteMoodleQuizzesToFile( quizzes::Vector{moodle_quiz},
                                    filename::String )


    header = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"*   
    "<!-- This file was generated by a Julia program -->\n\n"
    
    f = open( filename, "w" )
    
    write( f, header )
    for q in quizzes 
            write( f, MoodleQuizToXML( q ))
    end

    close( f )
end                            
                                    