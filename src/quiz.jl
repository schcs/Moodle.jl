# This file contains the functions related to quizzes

# MoodleQuestion is an abstract type defined as the union of all question types
# at the moment only one question type is defined
 
MoodleQuestion = Union{short_answer_question, 
                             matching_question, 
                             multiple_choice_question,
                             VF_CLOZE_question}


```@doc 
The data sructure that holds a quiz
```

#= struct moodle_quiz
    category::String                    # the category of the quiz
    questions::Vector{MoodleQuestion}   # the list of questions
end

# show method for moodle_quiz

function Base.show( io::IO, q::moodle_quiz )  
    print(io, "Moodle quiz\n\tCategory: ", q.category, 
            "\n\t", length(q.questions), " questions"  )
end

=#

@doc """ 
converts a quiz to XML string and writes it into a file
"""->

function moodle_quiz_to_file( category, questions, filename )
    # write a header
    
    f = open( filename, "w" )
    write( f, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"*   
        "<!-- This file was generated by a Julia program -->\n\n"*
        "<quiz>\n\n"*
        "<question type=\"category\">\n<category>\n"*
        "<text>\$course\$/top/"*category*"</text>\n"*
            "</category>\n</question>\n\n" )

    # write each question
    for q in questions
        write( f, QuestionToXML( q ))
    end

    # end of quiz
    write( f, "\n</quiz>\n" )    
    close( f )

    return Nothing
end

write_latex( qq::Vector ) = 
    LaTeXString( prod( L"{\bf Question %$k}\\\smallskip\\%$(write_latex( qq[k] ))%$(\"\n\")\bigskip\\=======\bigskip%$(\"\n\n\")" for k in 1:length(qq)))

show_pdf( q::Vector ) = render( write_latex( q ), MIME( "application/pdf" ))
                                    